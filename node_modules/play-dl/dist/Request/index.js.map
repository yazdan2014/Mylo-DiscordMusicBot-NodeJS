{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/Request/index.ts"],"names":[],"mappings":";;;AAAA,uCAAqC;AA4BrC,SAAgB,cAAc,CAAC,OAAe,EAAE,UAA0B,EAAE,MAAM,EAAE,KAAK,EAAE;IACvF,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,IAAI,GAAG,GAAG,IAAI,kBAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACzC,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;QACnB,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE;YAC/C,GAAG,GAAG,MAAM,cAAc,CAAE,GAAG,CAAC,OAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACnE,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;SACtB;QACD,OAAO,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC;AAVD,wCAUC;AAED,SAAgB,OAAO,CAAC,OAAe,EAAE,UAA0B,EAAE,MAAM,EAAE,KAAK,EAAE;IAChF,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,IAAI,GAAG,GAAG,IAAI,kBAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACzC,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;QAClB,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,EAAE;YAC/D,GAAG,GAAG,MAAM,OAAO,CAAE,GAAG,CAAC,OAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC/D;aAAM,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,EAAE;YACrC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC,UAAU,mBAAmB,CAAC,CAAC,CAAC;SAC/D;QACD,OAAO,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC;AAXD,0BAWC","sourcesContent":["import { Response } from './classes';\r\n\r\nexport type Proxy = ProxyOpts | string;\r\n\r\ninterface ProxyOpts {\r\n    host: string;\r\n    port: number;\r\n    authentication?: {\r\n        username: string;\r\n        password: string;\r\n    };\r\n}\r\n\r\ninterface RequestOptions {\r\n    body?: string;\r\n    method: 'GET' | 'POST';\r\n    proxies?: Proxy[];\r\n    cookies?: boolean;\r\n    headers?: Object;\r\n    timeout?: number;\r\n}\r\n\r\ninterface StreamGetterOptions {\r\n    method: 'GET' | 'POST';\r\n    cookies?: boolean;\r\n    headers: Object;\r\n}\r\n\r\nexport function request_stream(req_url: string, options: RequestOptions = { method: 'GET' }): Promise<Response> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = new Response(req_url, options);\r\n        await res.stream();\r\n        if (res.statusCode >= 300 && res.statusCode < 400) {\r\n            res = await request_stream((res.headers as any).location, options);\r\n            await res.stream();\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n\r\nexport function request(req_url: string, options: RequestOptions = { method: 'GET' }): Promise<Response> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = new Response(req_url, options);\r\n        await res.fetch();\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await request((res.headers as any).location, options);\r\n        } else if (Number(res.statusCode) > 400) {\r\n            reject(new Error(`Got ${res.statusCode} from the request`));\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n"]}