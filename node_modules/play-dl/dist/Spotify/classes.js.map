{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/Spotify/classes.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from \"../YouTube/utils/request\";\r\nimport { SpotifyDataOptions } from \".\";\r\n\r\n\r\ninterface SpotifyTrackAlbum{\r\n    name : string;\r\n    url : string;\r\n    id : string;\r\n    release_date : string;\r\n    release_date_precision : string;\r\n    total_tracks : number;\r\n}\r\n\r\ninterface SpotifyArtists{\r\n    name : string;\r\n    url : string;\r\n    id : string;\r\n}\r\n\r\ninterface SpotifyThumbnail{\r\n    height : number;\r\n    width : number\r\n    url : string\r\n}\r\n\r\ninterface SpotifyCopyright{\r\n    text : string;\r\n    type : string;\r\n}\r\n\r\nexport class SpotifyVideo{\r\n    name : string;\r\n    type : \"track\" | \"playlist\" | \"album\"\r\n    id : string;\r\n    url : string;\r\n    explicit : boolean;\r\n    durationInSec : number;\r\n    durationInMs : number;\r\n    artists : SpotifyArtists[]\r\n    album : SpotifyTrackAlbum\r\n    thumbnail : SpotifyThumbnail\r\n    constructor(data : any){\r\n        this.name = data.name\r\n        this.id = data.id\r\n        this.type = \"track\"\r\n        this.url = data.external_urls.spotify\r\n        this.explicit = data.explicit\r\n        this.durationInMs = data.duration_ms\r\n        this.durationInSec = Math.round(this.durationInMs/1000)\r\n        let artists : SpotifyArtists[] = []\r\n        data.artists.forEach((v : any) => {\r\n            artists.push({\r\n                name : v.name,\r\n                id : v.id,\r\n                url : v.external_urls.spotify\r\n            })\r\n        })\r\n        this.artists = artists\r\n        this.album = {\r\n            name : data.album.name,\r\n            url : data.external_urls.spotify,\r\n            id : data.album.id,\r\n            release_date : data.album.release_date,\r\n            release_date_precision : data.album.release_date_precision,\r\n            total_tracks : data.album.total_tracks\r\n        }\r\n        this.thumbnail = data.album.images[0]\r\n    }\r\n\r\n    toJSON(){\r\n        return {\r\n            name : this.name,\r\n            id : this.id,\r\n            type : this.type,\r\n            url : this.url,\r\n            explicit : this.explicit,\r\n            durationInMs : this.durationInMs,\r\n            durationInSec : this.durationInSec,\r\n            artists : this.artists,\r\n            album : this.album,\r\n            thumbnail : this.thumbnail\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpotifyPlaylist{\r\n    name : string;\r\n    type : \"track\" | \"playlist\" | \"album\"\r\n    collaborative : boolean;\r\n    description : string;\r\n    url : string;\r\n    id : string;\r\n    thumbnail : SpotifyThumbnail;\r\n    owner : SpotifyArtists;\r\n    tracksCount : number;\r\n    private spotifyData : SpotifyDataOptions;\r\n    private fetched_tracks : Map<string, SpotifyVideo[]>\r\n    constructor(data : any, spotifyData : SpotifyDataOptions){\r\n        this.name = data.name\r\n        this.type = \"playlist\"\r\n        this.collaborative = data.collaborative\r\n        this.description = data.description\r\n        this.url = data.external_urls.spotify\r\n        this.id = data.id\r\n        this.thumbnail = data.images[0]\r\n        this.owner = {\r\n            name : data.owner.display_name,\r\n            url : data.owner.external_urls.spotify,\r\n            id : data.owner.id\r\n        }\r\n        this.tracksCount = Number(data.tracks.total)\r\n        let videos: SpotifyVideo[] = []\r\n        data.tracks.items.forEach((v : any) => {\r\n            videos.push(new SpotifyVideo(v.track))\r\n        })\r\n        this.fetched_tracks = new Map()\r\n        this.fetched_tracks.set('1', videos)\r\n        this.spotifyData = spotifyData\r\n    }\r\n\r\n    async fetch(){\r\n        let fetching : number;\r\n        if(this.tracksCount > 1000) fetching = 1000\r\n        else fetching = this.tracksCount\r\n        if(fetching <= 100) return\r\n        let work = []\r\n        for(let i = 2; i <= Math.ceil(fetching/100); i++){\r\n            work.push(new Promise(async (resolve, reject) => {\r\n                let response = await request(`https://api.spotify.com/v1/playlists/${this.id}/tracks?offset=${(i-1)*100}&limit=100&market=${this.spotifyData.market}`, {\r\n                    headers : {\r\n                        \"Authorization\" : `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\r\n                    }\r\n                }).catch((err) => reject(`Response Error : \\n${err}`))\r\n                let videos: SpotifyVideo[] = []\r\n                if(typeof response !== 'string') return\r\n                let json_data = JSON.parse(response)\r\n                json_data.items.forEach((v : any) => {\r\n                    videos.push(new SpotifyVideo(v.track))\r\n                })\r\n                this.fetched_tracks.set(`${i}`, videos)\r\n                resolve('Success')\r\n            }))\r\n        }\r\n        await Promise.allSettled(work)\r\n        return this\r\n    }\r\n\r\n    page(num : number){\r\n        if(!num) throw new Error('Page number is not provided')\r\n        if(!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid')\r\n        return this.fetched_tracks.get(`${num}`)\r\n    }\r\n\r\n    get total_pages(){\r\n        return this.fetched_tracks.size\r\n    }\r\n\r\n    get total_tracks(){\r\n        let page_number: number = this.total_pages\r\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`page${page_number}`) as SpotifyVideo[]).length\r\n    }\r\n\r\n    toJSON(){\r\n        return {\r\n            name : this.name,\r\n            type : this.type,\r\n            collaborative : this.collaborative,\r\n            description : this.description,\r\n            url : this.url,\r\n            id : this.id,\r\n            thumbnail : this.thumbnail,\r\n            owner : this.owner,\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpotifyAlbum{\r\n    name : string\r\n    type : \"track\" | \"playlist\" | \"album\"\r\n    url : string\r\n    id : string;\r\n    thumbnail : SpotifyThumbnail\r\n    artists : SpotifyArtists[]\r\n    copyrights : SpotifyCopyright[]\r\n    release_date : string;\r\n    release_date_precision : string;\r\n    trackCount : number\r\n    private spotifyData : SpotifyDataOptions;\r\n    private fetched_tracks : Map<string, SpotifyTracks[]>\r\n    constructor(data : any, spotifyData : SpotifyDataOptions){\r\n        this.name = data.name\r\n        this.type = \"album\"\r\n        this.id = data.id\r\n        this.url = data.external_urls.spotify\r\n        this.thumbnail = data.images[0]\r\n        let artists : SpotifyArtists[] = []\r\n        data.artists.forEach((v : any) => {\r\n            artists.push({\r\n                name : v.name,\r\n                id : v.id,\r\n                url : v.external_urls.spotify\r\n            })\r\n        })\r\n        this.artists = artists\r\n        this.copyrights = data.copyrights\r\n        this.release_date = data.release_date\r\n        this.release_date_precision = data.release_date_precision\r\n        this.trackCount = data.total_tracks\r\n        let videos: SpotifyTracks[] = []\r\n        data.tracks.items.forEach((v : any) => {\r\n            videos.push(new SpotifyTracks(v))\r\n        })\r\n        this.fetched_tracks = new Map()\r\n        this.fetched_tracks.set('1', videos)\r\n        this.spotifyData = spotifyData\r\n    }\r\n\r\n    async fetch(){\r\n        let fetching : number;\r\n        if(this.trackCount > 500) fetching = 500\r\n        else fetching = this.trackCount\r\n        if(fetching <= 50) return\r\n        let work = []\r\n        for(let i = 2; i <= Math.ceil(fetching/50); i++){\r\n            work.push(new Promise(async (resolve, reject) => {\r\n                let response = await request(`https://api.spotify.com/v1/albums/${this.id}/tracks?offset=${(i-1)*50}&limit=50&market=${this.spotifyData.market}`, {\r\n                    headers : {\r\n                        \"Authorization\" : `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\r\n                    }\r\n                }).catch((err) => reject(`Response Error : \\n${err}`))\r\n                let videos: SpotifyTracks[] = []\r\n                if(typeof response !== 'string') return\r\n                let json_data = JSON.parse(response)\r\n                json_data.items.forEach((v : any) => {\r\n                    videos.push(new SpotifyTracks(v))\r\n                })\r\n                this.fetched_tracks.set(`${i}`, videos)\r\n                resolve('Success')\r\n            }))\r\n        }\r\n        await Promise.allSettled(work)\r\n        return this\r\n    }\r\n\r\n    page(num : number){\r\n        if(!num) throw new Error('Page number is not provided')\r\n        if(!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid')\r\n        return this.fetched_tracks.get(`${num}`)\r\n    }\r\n\r\n    get total_pages(){\r\n        return this.fetched_tracks.size\r\n    }\r\n\r\n    get total_tracks(){\r\n        let page_number: number = this.total_pages\r\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`page${page_number}`) as SpotifyVideo[]).length\r\n    }\r\n\r\n    toJSON(){\r\n        return {\r\n            name : this.name,\r\n            type : this.type,\r\n            url : this.url,\r\n            thumbnail : this.thumbnail,\r\n            artists : this.artists,\r\n            copyrights : this.copyrights,\r\n            release_date : this.release_date,\r\n            release_date_precision : this.release_date_precision,\r\n            total_tracks : this.total_tracks,\r\n        }\r\n    }\r\n}\r\n\r\nclass SpotifyTracks{\r\n    name : string;\r\n    type : \"track\" | \"playlist\" | \"album\"\r\n    id : string;\r\n    url : string;\r\n    explicit : boolean;\r\n    durationInSec : number;\r\n    durationInMs : number;\r\n    artists : SpotifyArtists[]\r\n    constructor(data : any){\r\n        this.name = data.name\r\n        this.id = data.id\r\n        this.type = \"track\"\r\n        this.url = data.external_urls.spotify\r\n        this.explicit = data.explicit\r\n        this.durationInMs = data.duration_ms\r\n        this.durationInSec = Math.round(this.durationInMs/1000)\r\n        let artists : SpotifyArtists[] = []\r\n        data.artists.forEach((v : any) => {\r\n            artists.push({\r\n                name : v.name,\r\n                id : v.id,\r\n                url : v.external_urls.spotify\r\n            })\r\n        })\r\n        this.artists = artists\r\n    }\r\n\r\n    toJSON(){\r\n        return {\r\n            name : this.name,\r\n            id : this.id,\r\n            type : this.type,\r\n            url : this.url,\r\n            explicit : this.explicit,\r\n            durationInMs : this.durationInMs,\r\n            durationInSec : this.durationInSec,\r\n            artists : this.artists,\r\n        }\r\n    }\r\n}"]}