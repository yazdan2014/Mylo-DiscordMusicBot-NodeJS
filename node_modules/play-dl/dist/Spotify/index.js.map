{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/Spotify/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from \"../YouTube/utils/request\";\r\nimport { SpotifyAlbum, SpotifyPlaylist, SpotifyVideo } from \"./classes\"\r\nimport readline from 'readline'\r\nimport fs from 'fs'\r\n\r\nvar spotifyData : SpotifyDataOptions;\r\nif(fs.existsSync('.data/spotify.data')){\r\n    spotifyData = JSON.parse(fs.readFileSync('.data/spotify.data').toString())\r\n}\r\n\r\nexport interface SpotifyDataOptions{\r\n    client_id : string;\r\n    client_secret : string;\r\n    redirect_url : string;\r\n    authorization_code? :string;\r\n    access_token? : string;\r\n    refresh_token? : string;\r\n    token_type? : string;\r\n    expires_in? : number;\r\n    expiry? : number;\r\n    market? : string;\r\n}\r\n\r\nconst pattern = /^((https:)?\\/\\/)?open.spotify.com\\/(track|album|playlist)\\//\r\n\r\nexport async function spotify(url : string): Promise<SpotifyAlbum | SpotifyPlaylist | SpotifyVideo>{\r\n    if(!spotifyData) throw new Error('Spotify Data is missing\\nDid you forgot to do authorization ?')\r\n    if(!url.match(pattern)) throw new Error('This is not a Spotify URL')\r\n    if(url.indexOf('track/') !== -1){\r\n        let trackID = url.split('track/')[1].split('&')[0].split('?')[0]\r\n        let response = await request(`https://api.spotify.com/v1/tracks/${trackID}?market=${spotifyData.market}`, {\r\n            headers : {\r\n                \"Authorization\" : `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }).catch((err) => {return 0})\r\n        if(typeof response !== 'number') return new SpotifyVideo(JSON.parse(response))\r\n        else throw new Error('Failed to get spotify Track Data')\r\n    }\r\n    else if(url.indexOf('album/') !== -1){\r\n        let albumID = url.split('album/')[1].split('&')[0].split('?')[0]\r\n        let response = await request(`https://api.spotify.com/v1/albums/${albumID}?market=${spotifyData.market}`, {\r\n            headers : {\r\n                \"Authorization\" : `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }).catch((err) => {return 0})\r\n        if(typeof response !== 'number') return new SpotifyAlbum(JSON.parse(response), spotifyData)\r\n        else throw new Error('Failed to get spotify Album Data')\r\n    }\r\n    else if(url.indexOf('playlist/') !== -1){\r\n        let playlistID = url.split('playlist/')[1].split('&')[0].split('?')[0]\r\n        let response = await request(`https://api.spotify.com/v1/playlists/${playlistID}?market=${spotifyData.market}`, {\r\n            headers : {\r\n                \"Authorization\" : `${spotifyData.token_type} ${spotifyData.access_token}`\r\n            }\r\n        }).catch((err) => {return 0})\r\n        if(typeof response !== 'number') return new SpotifyPlaylist(JSON.parse(response), spotifyData)\r\n        else throw new Error('Failed to get spotify Playlist Data')\r\n    }\r\n    else throw new Error('URL is out of scope for play-dl.')\r\n}\r\n\r\nexport function sp_validate(url : string): \"track\" | \"playlist\" | \"album\" | boolean{\r\n    if(!url.match(pattern)) return false\r\n    if(url.indexOf('track/') !== -1){\r\n        return \"track\"\r\n    }\r\n    else if(url.indexOf('album/') !== -1){\r\n        return \"album\"\r\n    }\r\n    else if(url.indexOf('playlist/') !== -1){\r\n        return \"playlist\"\r\n    }\r\n    else return false\r\n}\r\n\r\nexport function Authorization(){\r\n    let ask = readline.createInterface({\r\n        input : process.stdin,\r\n        output : process.stdout\r\n    })\r\n    \r\n    let client_id : string, client_secret : string, redirect_url : string, market : string;\r\n    ask.question('Client ID : ', (id) => {\r\n        client_id = id\r\n        ask.question('Client Secret : ', (secret) => {\r\n            client_secret = secret\r\n            ask.question('Redirect URL : ', (url) => {\r\n                redirect_url = url\r\n                console.log('\\nMarket Selection URL : \\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \\n')\r\n                ask.question('Market : ', (mar) => {\r\n                    if(mar.length === 2) market = mar\r\n                    else {\r\n                        console.log('Invalid Market, Selecting IN as market')\r\n                        market = 'IN'\r\n                    }\r\n                    console.log('\\nNow Go to your browser and Paste this url. Authroize it and paste the redirected url here. \\n')\r\n                    console.log(`https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(redirect_url)} \\n`)\r\n                    ask.question('Redirected URL : ',async (url) => {\r\n                        if (!fs.existsSync('.data')) fs.mkdirSync('.data')\r\n                        spotifyData = {\r\n                            client_id,\r\n                            client_secret,\r\n                            redirect_url,\r\n                            authorization_code : url.split('code=')[1],\r\n                            market\r\n                        }\r\n                        let check = await SpotifyAuthorize(spotifyData)\r\n                        if(check === false) throw new Error('Failed to get access Token.')\r\n                        ask.close()\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nasync function SpotifyAuthorize(data : SpotifyDataOptions): Promise<boolean>{\r\n    let response = await request(`https://accounts.spotify.com/api/token`, {\r\n        headers : {\r\n            \"Authorization\" : `Basic ${Buffer.from(`${data.client_id}:${data.client_secret}`).toString('base64')}`,\r\n            \"Content-Type\" : \"application/x-www-form-urlencoded\"\r\n        },\r\n        body : `grant_type=authorization_code&code=${data.authorization_code}&redirect_uri=${encodeURI(data.redirect_url)}`,\r\n        method : \"POST\"\r\n    }).catch(() => {\r\n        return 0\r\n    })\r\n    \r\n    if(typeof response === 'number') return false\r\n    let resp_json = JSON.parse(response)\r\n    spotifyData = {\r\n        client_id : data.client_id,\r\n        client_secret : data.client_secret,\r\n        redirect_url : data.redirect_url,\r\n        access_token : resp_json.access_token,\r\n        refresh_token : resp_json.refresh_token,\r\n        expires_in : Number(resp_json.expires_in),\r\n        expiry : Date.now() + ((resp_json.expires_in - 1) * 1000),\r\n        token_type : resp_json.token_type,\r\n        market : data.market\r\n    }\r\n    fs.writeFileSync('.data/spotify.data', JSON.stringify(spotifyData, undefined, 4))\r\n    return true\r\n}\r\n\r\nexport function is_expired(){\r\n    if(Date.now() >= (spotifyData.expiry as number)) return true\r\n    else return false\r\n}\r\n\r\nexport async function RefreshToken(): Promise<true | false>{\r\n    let response = await request(`https://accounts.spotify.com/api/token`, {\r\n        headers : {\r\n            \"Authorization\" : `Basic ${Buffer.from(`${spotifyData.client_id}:${spotifyData.client_secret}`).toString('base64')}`,\r\n            \"Content-Type\" : \"application/x-www-form-urlencoded\"\r\n        },\r\n        body : `grant_type=refresh_token&refresh_token=${spotifyData.refresh_token}`,\r\n        method : \"POST\"\r\n    }).catch(() => {\r\n        return 0\r\n    })\r\n\r\n    if(typeof response === 'number') return false\r\n    let resp_json = JSON.parse(response)\r\n    spotifyData.access_token = resp_json.access_token\r\n    spotifyData.expires_in = Number(resp_json.expires_in)\r\n    spotifyData.expiry = Date.now() + ((resp_json.expires_in - 1) * 1000)\r\n    spotifyData.token_type = resp_json.token_type\r\n    fs.writeFileSync('.data/spotify.data', JSON.stringify(spotifyData, undefined, 4))\r\n    return true\r\n}"]}