{"version":3,"file":"LiveStream.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/LiveStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { PassThrough } from 'stream'\r\nimport { IncomingMessage } from 'http';\r\nimport { StreamType } from '../stream';\r\nimport { request, request_stream } from '../utils/request';\r\nimport { video_info } from '..';\r\n\r\nexport interface FormatInterface{\r\n    url : string;\r\n    targetDurationSec : number;\r\n    maxDvrDurationSec : number\r\n}\r\n\r\nexport class LiveStreaming{\r\n    type : StreamType\r\n    stream : PassThrough\r\n    private base_url : string\r\n    private url : string\r\n    private interval : number\r\n    private packet_count : number\r\n    private timer : NodeJS.Timer | null\r\n    private video_url : string\r\n    private dash_timer : NodeJS.Timer | null\r\n    private segments_urls : string[]\r\n    private request : IncomingMessage | null\r\n    constructor(dash_url : string, target_interval : number, video_url : string){\r\n        this.type = StreamType.Arbitrary\r\n        this.url = dash_url\r\n        this.base_url = ''\r\n        this.stream = new PassThrough({ highWaterMark : 10 * 1000 * 1000 })\r\n        this.segments_urls = []\r\n        this.packet_count = 0\r\n        this.request = null\r\n        this.timer = null\r\n        this.video_url = video_url\r\n        this.interval = target_interval * 1000 || 0\r\n        this.dash_timer = setTimeout(() => {\r\n            this.dash_updater()\r\n        }, 1800000)\r\n        this.stream.on('close', () => {\r\n            this.cleanup()\r\n        });\r\n        this.start()\r\n    }\r\n    \r\n    private async dash_updater(){\r\n        let info = await video_info(this.video_url)\r\n        if(info.LiveStreamData.isLive === true && info.LiveStreamData.hlsManifestUrl !== null && info.video_details.durationInSec === '0'){\r\n            this.url = info.LiveStreamData.dashManifestUrl\r\n        }\r\n        this.dash_timer = setTimeout(() => {\r\n            this.dash_updater()\r\n        }, 1800000)\r\n    }\r\n\r\n    private async dash_getter(){\r\n        let response = await request(this.url)\r\n        let audioFormat = response.split('<AdaptationSet id=\"0\"')[1].split('</AdaptationSet>')[0].split('</Representation>')\r\n        if(audioFormat[audioFormat.length - 1] === '') audioFormat.pop()\r\n        this.base_url = audioFormat[audioFormat.length - 1].split('<BaseURL>')[1].split('</BaseURL>')[0]\r\n        let list = audioFormat[audioFormat.length - 1].split('<SegmentList>')[1].split('</SegmentList>')[0]\r\n        this.segments_urls = list.replace(new RegExp('<SegmentURL media=\"', 'g'), '').split('\"/>')\r\n        if(this.segments_urls[this.segments_urls.length - 1] === '') this.segments_urls.pop()\r\n    }\r\n\r\n    private cleanup(){\r\n        clearTimeout(this.timer as NodeJS.Timer)\r\n        clearTimeout(this.dash_timer as NodeJS.Timer)\r\n        this.request?.unpipe(this.stream)\r\n        this.request?.destroy()\r\n        this.dash_timer = null\r\n        this.video_url = ''\r\n        this.request = null\r\n        this.timer = null\r\n        this.url = ''\r\n        this.base_url = ''\r\n        this.segments_urls = []\r\n        this.packet_count = 0\r\n        this.interval = 0\r\n    }\r\n\r\n    private async start(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        await this.dash_getter()\r\n        if(this.segments_urls.length > 3) this.segments_urls.splice(0, this.segments_urls.length - 3)\r\n        if(this.packet_count === 0) this.packet_count = Number(this.segments_urls[0].split('sq/')[1].split('/')[0])\r\n        for await (let segment of this.segments_urls){\r\n            if(Number(segment.split('sq/')[1].split('/')[0]) !== this.packet_count){\r\n                continue\r\n            }\r\n            await new Promise(async(resolve, reject) => {\r\n                let stream = await request_stream(this.base_url + segment)\r\n                this.request = stream\r\n                stream.pipe(this.stream, { end : false })\r\n                stream.on('end', () => {\r\n                    this.packet_count++\r\n                    resolve('')\r\n                })\r\n                stream.once('error', (err) => {\r\n                    this.stream.emit('error', err)\r\n                })\r\n            })\r\n        }\r\n        this.timer = setTimeout(() => {\r\n            this.start()\r\n        }, this.interval)\r\n    }\r\n}\r\n\r\nexport class Stream {\r\n    type : StreamType\r\n    stream : PassThrough\r\n    private url : string\r\n    private bytes_count : number;\r\n    private per_sec_bytes : number;\r\n    private content_length : number;\r\n    private video_url : string;\r\n    private timer : NodeJS.Timer | null;\r\n    private cookie : string;\r\n    private data_ended : boolean;\r\n    private playing_count : number;\r\n    private request : IncomingMessage | null\r\n    constructor(url : string, type : StreamType, duration : number, contentLength : number, video_url : string, cookie : string){\r\n        this.url = url\r\n        this.type = type\r\n        this.stream = new PassThrough({ highWaterMark : 10 * 1000 * 1000 })\r\n        this.bytes_count = 0\r\n        this.video_url = video_url\r\n        this.cookie = cookie\r\n        this.timer = setInterval(() => {\r\n            this.retry()\r\n        }, 7200 * 1000)\r\n        this.per_sec_bytes = Math.ceil(contentLength / duration)\r\n        this.content_length = contentLength\r\n        this.request = null\r\n        this.data_ended = false\r\n        this.playing_count = 0\r\n        this.stream.on('close', () => {\r\n            this.cleanup()\r\n        })\r\n        this.stream.on('pause', () => {\r\n            this.playing_count++;\r\n            if(this.data_ended){\r\n                this.bytes_count = 0\r\n                this.per_sec_bytes = 0\r\n                this.cleanup()\r\n                this.stream.removeAllListeners('pause')\r\n            }\r\n            else if(this.playing_count === 280){\r\n                this.playing_count = 0\r\n                this.loop()\r\n            }\r\n        })\r\n        this.loop()\r\n    }\r\n\r\n    private async retry(){\r\n        let info = await video_info(this.video_url, this.cookie)\r\n        this.url = info.format[info.format.length - 1].url\r\n    }\r\n\r\n    private cleanup(){\r\n        clearInterval(this.timer as NodeJS.Timer)\r\n        this.request?.unpipe(this.stream)\r\n        this.request?.destroy()\r\n        this.timer = null\r\n        this.request = null\r\n        this.url = ''\r\n    }\r\n\r\n    private async loop(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        let end : number = this.bytes_count + this.per_sec_bytes * 300;\r\n        let stream = await request_stream(this.url, {\r\n            headers : {\r\n                \"range\" : `bytes=${this.bytes_count}-${end >= this.content_length ? '' : end}`\r\n            }\r\n        })\r\n        if(Number(stream.statusCode) >= 400){\r\n            this.cleanup()\r\n            await this.retry()\r\n            this.loop()\r\n            if(!this.timer){\r\n                this.timer = setInterval(() => {\r\n                    this.retry()\r\n                }, 7200 * 1000)\r\n            }\r\n            return\r\n        }\r\n        this.request = stream\r\n        stream.pipe(this.stream, { end : false })\r\n\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err)\r\n        })\r\n\r\n        stream.on('data', (chunk: any) => {\r\n            this.bytes_count += chunk.length\r\n        })\r\n\r\n        stream.on('end', () => {\r\n            if(end >= this.content_length) this.data_ended = true\r\n        })\r\n    }\r\n}\r\n"]}