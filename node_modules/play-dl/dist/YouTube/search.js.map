{"version":3,"file":"search.js","sourceRoot":"","sources":["../../play-dl/YouTube/search.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAC1C,2CAAyE;AAMzE,IAAK,UAIJ;AAJD,WAAK,UAAU;IACX,wCAA0B,CAAA;IAC1B,2CAA6B,CAAA;IAC7B,0CAA4B,CAAA;AAChC,CAAC,EAJI,UAAU,KAAV,UAAU,QAId;AAEM,KAAK,UAAU,MAAM,CAAC,MAAc,EAAE,OAA+B;IACxE,IAAI,GAAG,GAAG,+CAA+C,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;IACvF,IAAG,CAAC,OAAO;QAAE,OAAO,GAAG,EAAE,IAAI,EAAG,OAAO,EAAC,CAAA;IACxC,IAAG,CAAC,OAAO,CAAC,IAAI;QAAE,OAAO,CAAC,IAAI,GAAG,OAAO,CAAA;IACxC,IAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAC;QAClB,GAAG,IAAI,MAAM,CAAA;QACb,QAAO,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAC;YACjB,KAAK,SAAS;gBACV,GAAG,IAAI,UAAU,CAAC,OAAO,CAAA;gBACzB,MAAK;YACT,KAAK,UAAU;gBACX,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAA;gBAC1B,MAAK;YACT,KAAK,OAAO;gBACR,GAAG,IAAI,UAAU,CAAC,KAAK,CAAA;gBACvB,MAAK;SACZ;KACJ;IACD,IAAI,IAAI,GAAG,MAAM,iBAAO,CAAC,GAAG,EAAE;QAC1B,OAAO,EAAG,EAAC,iBAAiB,EAAG,qCAAqC,EAAC;KACxE,CAAC,CAAA;IACF,IAAI,IAAI,GAAG,0BAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IAC3C,OAAO,IAAI,CAAA;AACf,CAAC;AAvBD,wBAuBC","sourcesContent":["import { request } from \"./utils/request\";\r\nimport { ParseSearchInterface, ParseSearchResult } from \"./utils/parser\";\r\nimport { Video } from \"./classes/Video\";\r\nimport { Channel } from \"./classes/Channel\";\r\nimport { PlayList } from \"./classes/Playlist\";\r\n\r\n\r\nenum SearchType {\r\n    Video = 'EgIQAQ%253D%253D',\r\n    PlayList = 'EgIQAw%253D%253D',\r\n    Channel = 'EgIQAg%253D%253D',\r\n}\r\n\r\nexport async function search(search :string, options? : ParseSearchInterface): Promise<(Video | Channel | PlayList)[]> {\r\n    let url = 'https://www.youtube.com/results?search_query=' + search.replaceAll(' ', '+')\r\n    if(!options) options = { type : \"video\"}\r\n    if(!options.type) options.type = \"video\" \r\n    if(!url.match('&sp=')){\r\n        url += '&sp='\r\n        switch(options?.type){\r\n            case 'channel':\r\n                url += SearchType.Channel\r\n                break\r\n            case 'playlist':\r\n                url += SearchType.PlayList\r\n                break\r\n            case 'video':\r\n                url += SearchType.Video\r\n                break\r\n        }\r\n    }\r\n    let body = await request(url, {\r\n        headers : {'accept-language' : 'en-US,en-IN;q=0.9,en;q=0.8,hi;q=0.7'}\r\n    })\r\n    let data = ParseSearchResult(body, options)\r\n    return data\r\n}"]}