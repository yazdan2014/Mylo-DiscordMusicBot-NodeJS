{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../play-dl/YouTube/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { video_info } from '.';\r\nimport { LiveStreaming, Stream } from './classes/LiveStream';\r\nimport { ProxyOptions as Proxy } from './../Request';\r\n\r\nexport enum StreamType {\r\n    Arbitrary = 'arbitrary',\r\n    Raw = 'raw',\r\n    OggOpus = 'ogg/opus',\r\n    WebmOpus = 'webm/opus',\r\n    Opus = 'opus'\r\n}\r\n\r\nexport interface StreamOptions {\r\n    quality?: number;\r\n    proxy?: Proxy[];\r\n}\r\n\r\nexport interface InfoData {\r\n    LiveStreamData: {\r\n        isLive: boolean;\r\n        dashManifestUrl: string;\r\n        hlsManifestUrl: string;\r\n    };\r\n    html5player: string;\r\n    format: any[];\r\n    video_details: any;\r\n}\r\n/**\r\n * Command to find audio formats from given format array\r\n * @param formats Formats to search from\r\n * @returns Audio Formats array\r\n */\r\nexport function parseAudioFormats(formats: any[]) {\r\n    const result: any[] = [];\r\n    formats.forEach((format) => {\r\n        const type = format.mimeType as string;\r\n        if (type.startsWith('audio')) {\r\n            format.codec = type.split('codecs=\"')[1].split('\"')[0];\r\n            format.container = type.split('audio/')[1].split(';')[0];\r\n            result.push(format);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Type for YouTube Stream\r\n */\r\nexport type YouTubeStream = Stream | LiveStreaming;\r\n/**\r\n * Stream command for YouTube\r\n * @param url YouTube URL\r\n * @param options lets you add quality, cookie, proxy support for stream\r\n * @returns Stream class with type and stream for playing.\r\n */\r\nexport async function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream> {\r\n    const info = await video_info(url, { proxy: options.proxy });\r\n    const final: any[] = [];\r\n    if (\r\n        info.LiveStreamData.isLive === true &&\r\n        info.LiveStreamData.hlsManifestUrl !== null &&\r\n        info.video_details.durationInSec === 0\r\n    ) {\r\n        return new LiveStreaming(\r\n            info.LiveStreamData.dashManifestUrl,\r\n            info.format[info.format.length - 1].targetDurationSec,\r\n            info.video_details.url\r\n        );\r\n    }\r\n\r\n    const audioFormat = parseAudioFormats(info.format);\r\n    if (typeof options.quality !== 'number') options.quality = audioFormat.length - 1;\r\n    else if (options.quality <= 0) options.quality = 0;\r\n    else if (options.quality >= audioFormat.length) options.quality = audioFormat.length - 1;\r\n    if (audioFormat.length !== 0) final.push(audioFormat[options.quality]);\r\n    else final.push(info.format[info.format.length - 1]);\r\n    let type: StreamType =\r\n        final[0].codec === 'opus' && final[0].container === 'webm' ? StreamType.WebmOpus : StreamType.Arbitrary;\r\n    return new Stream(\r\n        final[0].url,\r\n        type,\r\n        info.video_details.durationInSec,\r\n        Number(final[0].contentLength),\r\n        info.video_details.url,\r\n        options\r\n    );\r\n}\r\n/**\r\n * Stream command for YouTube using info from video_info or decipher_info function.\r\n * @param info video_info data\r\n * @param options lets you add quality, cookie, proxy support for stream\r\n * @returns Stream class with type and stream for playing.\r\n */\r\nexport async function stream_from_info(info: InfoData, options: StreamOptions = {}): Promise<YouTubeStream> {\r\n    const final: any[] = [];\r\n    if (\r\n        info.LiveStreamData.isLive === true &&\r\n        info.LiveStreamData.hlsManifestUrl !== null &&\r\n        info.video_details.durationInSec === '0'\r\n    ) {\r\n        return new LiveStreaming(\r\n            info.LiveStreamData.dashManifestUrl,\r\n            info.format[info.format.length - 1].targetDurationSec,\r\n            info.video_details.url\r\n        );\r\n    }\r\n\r\n    const audioFormat = parseAudioFormats(info.format);\r\n    if (typeof options.quality !== 'number') options.quality = audioFormat.length - 1;\r\n    else if (options.quality <= 0) options.quality = 0;\r\n    else if (options.quality >= audioFormat.length) options.quality = audioFormat.length - 1;\r\n    if (audioFormat.length !== 0) final.push(audioFormat[options.quality]);\r\n    else final.push(info.format[info.format.length - 1]);\r\n    let type: StreamType =\r\n        final[0].codec === 'opus' && final[0].container === 'webm' ? StreamType.WebmOpus : StreamType.Arbitrary;\r\n    return new Stream(\r\n        final[0].url,\r\n        type,\r\n        info.video_details.durationInSec,\r\n        Number(final[0].contentLength),\r\n        info.video_details.url,\r\n        options\r\n    );\r\n}\r\n"]}