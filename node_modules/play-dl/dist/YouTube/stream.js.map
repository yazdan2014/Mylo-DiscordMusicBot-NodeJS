{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../play-dl/YouTube/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { video_info } from \".\"\r\nimport { LiveStreaming, Stream } from \"./classes/LiveStream\"\r\n\r\nexport enum StreamType{\r\n    Arbitrary = 'arbitrary',\r\n    Raw = 'raw',\r\n    OggOpus = 'ogg/opus',\r\n    WebmOpus = 'webm/opus',\r\n    Opus = 'opus',\r\n}\r\n\r\ninterface InfoData{\r\n    LiveStreamData : {\r\n        isLive : boolean\r\n        dashManifestUrl : string\r\n        hlsManifestUrl : string\r\n    }\r\n    html5player : string\r\n    format : any[]\r\n    video_details : any\r\n}\r\n\r\nfunction parseAudioFormats(formats : any[]){\r\n    let result: any[] = []\r\n    formats.forEach((format) => {\r\n        let type = format.mimeType as string\r\n        if(type.startsWith('audio')){\r\n            format.codec = type.split('codecs=\"')[1].split('\"')[0]\r\n            format.container = type.split('audio/')[1].split(';')[0]\r\n            result.push(format)\r\n        }\r\n    })\r\n    return result\r\n}\r\n\r\nexport async function stream(url : string, cookie? : string): Promise<Stream | LiveStreaming>{\r\n    let info = await video_info(url, cookie)\r\n    let final: any[] = [];\r\n    let type : StreamType;\r\n    if(info.LiveStreamData.isLive === true && info.LiveStreamData.hlsManifestUrl !== null && info.video_details.durationInSec === '0') {\r\n        return new LiveStreaming(info.LiveStreamData.dashManifestUrl, info.format[info.format.length - 1].targetDurationSec, info.video_details.url)\r\n    }\r\n\r\n    let audioFormat = parseAudioFormats(info.format)\r\n    let opusFormats = filterFormat(audioFormat, \"opus\")\r\n\r\n    if(opusFormats.length === 0){\r\n        type = StreamType.Arbitrary\r\n\tif(audioFormat.length === 0){\r\n            final.push(info.format[info.format.length - 1])\r\n\t}\r\n\telse{\r\n            final.push(audioFormat[audioFormat.length - 1])\r\n\t}\r\n    }\r\n    else{\r\n        type = StreamType.WebmOpus\r\n        final.push(opusFormats[opusFormats.length - 1])\r\n    }\r\n    \r\n    return new Stream(final[0].url, type, info.video_details.durationInSec, Number(final[0].contentLength), info.video_details.url, cookie as string)\r\n}\r\n\r\nexport async function stream_from_info(info : InfoData, cookie? : string): Promise<Stream | LiveStreaming>{\r\n    let final: any[] = [];\r\n    let type : StreamType;\r\n    if(info.LiveStreamData.isLive === true && info.LiveStreamData.hlsManifestUrl !== null && info.video_details.durationInSec === '0') {\r\n        return new LiveStreaming(info.LiveStreamData.dashManifestUrl, info.format[info.format.length - 1].targetDurationSec, info.video_details.url)\r\n    }\r\n\r\n    let audioFormat = parseAudioFormats(info.format)\r\n    let opusFormats = filterFormat(audioFormat, \"opus\")\r\n\r\n    if(opusFormats.length === 0){\r\n        type = StreamType.Arbitrary\r\n\tif(audioFormat.length === 0){\r\n            final.push(info.format[info.format.length - 1])\r\n\t}\r\n\telse{\r\n            final.push(audioFormat[audioFormat.length - 1])\r\n\t}\r\n    }\r\n    else{\r\n        type = StreamType.WebmOpus\r\n        final.push(opusFormats[opusFormats.length - 1])\r\n    }\r\n    \r\n    return new Stream(final[0].url, type, info.video_details.durationInSec, Number(final[0].contentLength), info.video_details.url, cookie as string)\r\n}\r\n\r\nfunction filterFormat(formats : any[], codec : string){\r\n    let result: any[] = []\r\n    formats.forEach((format) => {\r\n        if(format.codec === codec) result.push(format)\r\n    })\r\n    return result\r\n}\r\n"]}