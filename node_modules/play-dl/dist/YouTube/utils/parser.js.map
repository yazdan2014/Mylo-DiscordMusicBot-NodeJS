{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Video } from \"../classes/Video\";\r\nimport { PlayList } from \"../classes/Playlist\";\r\nimport { Channel } from \"../classes/Channel\";\r\n\r\nexport interface ParseSearchInterface {\r\n    type?: \"video\" | \"playlist\" | \"channel\" ;\r\n    limit?: number;\r\n}\r\n\r\nexport interface thumbnail{\r\n    width: string;\r\n    height : string;\r\n    url : string\r\n}\r\n\r\nexport function ParseSearchResult(html : string, options? : ParseSearchInterface): (Video | PlayList | Channel)[] {\r\n    if(!html) throw new Error('Can\\'t parse Search result without data')\r\n    if (!options) options = { type: \"video\", limit: 0 };\r\n    if (!options.type) options.type = \"video\";\r\n\r\n    let data = html.split(\"var ytInitialData = \")[1].split(\"}};\")[0] + '}}';\r\n    let json_data = JSON.parse(data)\r\n    let results = []\r\n    let details = json_data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents[0].itemSectionRenderer.contents\r\n    for(let i = 0; i < details.length; i++){\r\n        if (typeof options.limit === \"number\" && options.limit > 0 && results.length >= options.limit) break;\r\n        if (options.type === \"video\") {\r\n            const parsed = parseVideo(details[i]);\r\n            if (!parsed) continue;\r\n            results.push(parsed)\r\n        } else if (options.type === \"channel\") {\r\n            const parsed = parseChannel(details[i]);\r\n            if (!parsed) continue;\r\n            results.push(parsed)\r\n        } else if (options.type === \"playlist\") {\r\n            const parsed = parsePlaylist(details[i]);\r\n            if (!parsed) continue;\r\n            results.push(parsed)\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\n\r\nfunction parseDuration(duration: string): number {\r\n    duration ??= \"0:00\";\r\n    const args = duration.split(\":\");\r\n    let dur = 0;\r\n\r\n    switch (args.length) {\r\n        case 3:\r\n            dur = parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\r\n            break;\r\n        case 2:\r\n            dur = parseInt(args[0]) * 60 + parseInt(args[1]);\r\n            break;\r\n        default:\r\n            dur = parseInt(args[0]);\r\n    }\r\n\r\n    return dur;\r\n}\r\n\r\nexport function parseChannel(data?: any): Channel | void {\r\n    if (!data || !data.channelRenderer) return;\r\n    const badge = data.channelRenderer.ownerBadges && data.channelRenderer.ownerBadges[0];\r\n    let url = `https://www.youtube.com${data.channelRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl || data.channelRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url}`;\r\n    let res = new Channel({\r\n        id: data.channelRenderer.channelId,\r\n        name: data.channelRenderer.title.simpleText,\r\n        icon: {\r\n            url : data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1].url.replace('//', 'https://'),\r\n            width : data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1].width,\r\n            height: data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1].height\r\n        },\r\n        url: url,\r\n        verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes(\"verified\")),\r\n        subscribers: (data.channelRenderer.subscriberCountText?.simpleText) ? data.channelRenderer.subscriberCountText.simpleText : '0 subscribers'\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\nexport function parseVideo(data?: any): Video | void {\r\n    if (!data || !data.videoRenderer) return;\r\n\r\n    const badge = data.videoRenderer.ownerBadges && data.videoRenderer.ownerBadges[0];\r\n    let res = new Video({\r\n        id: data.videoRenderer.videoId,\r\n        url: `https://www.youtube.com/watch?v=${data.videoRenderer.videoId}`,\r\n        title: data.videoRenderer.title.runs[0].text,\r\n        description: data.videoRenderer.descriptionSnippet && data.videoRenderer.descriptionSnippet.runs[0] ? data.videoRenderer.descriptionSnippet.runs[0].text : \"\",\r\n        duration: data.videoRenderer.lengthText ? parseDuration(data.videoRenderer.lengthText.simpleText) : 0,\r\n        duration_raw: data.videoRenderer.lengthText ? data.videoRenderer.lengthText.simpleText : null,\r\n        thumbnail: data.videoRenderer.thumbnail.thumbnails[data.videoRenderer.thumbnail.thumbnails.length - 1],\r\n        channel: {\r\n            id: data.videoRenderer.ownerText.runs[0].navigationEndpoint.browseEndpoint.browseId || null,\r\n            name: data.videoRenderer.ownerText.runs[0].text || null,\r\n            url: `https://www.youtube.com${data.videoRenderer.ownerText.runs[0].navigationEndpoint.browseEndpoint.canonicalBaseUrl || data.videoRenderer.ownerText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`,\r\n            icon: {\r\n                url: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail.thumbnails[0].url,\r\n                width: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail.thumbnails[0].width,\r\n                height: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail.thumbnails[0].height\r\n            },\r\n            verified: Boolean(badge?.metadataBadgeRenderer?.style?.toLowerCase().includes(\"verified\"))\r\n        },\r\n        uploadedAt: data.videoRenderer.publishedTimeText?.simpleText ?? null,\r\n        views: data.videoRenderer.viewCountText?.simpleText?.replace(/[^0-9]/g, \"\") ?? 0,\r\n        live : data.videoRenderer.lengthText ? false : true,\r\n    });\r\n\r\n    return res;\r\n}\r\n\r\n\r\nexport function parsePlaylist(data?: any): PlayList | void {\r\n    if (!data.playlistRenderer) return;\r\n\r\n    const res = new PlayList(\r\n        {\r\n            id: data.playlistRenderer.playlistId,\r\n            title: data.playlistRenderer.title.simpleText,\r\n            thumbnail: {\r\n                id: data.playlistRenderer.playlistId,\r\n                url: data.playlistRenderer.thumbnails[0].thumbnails[data.playlistRenderer.thumbnails[0].thumbnails.length - 1].url,\r\n                height: data.playlistRenderer.thumbnails[0].thumbnails[data.playlistRenderer.thumbnails[0].thumbnails.length - 1].height,\r\n                width: data.playlistRenderer.thumbnails[0].thumbnails[data.playlistRenderer.thumbnails[0].thumbnails.length - 1].width\r\n            },\r\n            channel: {\r\n                id: data.playlistRenderer.shortBylineText.runs[0].navigationEndpoint.browseEndpoint.browseId,\r\n                name: data.playlistRenderer.shortBylineText.runs[0].text,\r\n                url: `https://www.youtube.com${data.playlistRenderer.shortBylineText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url}`\r\n            },\r\n            videos: parseInt(data.playlistRenderer.videoCount.replace(/[^0-9]/g, \"\"))\r\n        },\r\n        true\r\n    );\r\n\r\n    return res;\r\n}"]}