{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { YouTubeVideo } from '../classes/Video';\nimport { YouTubePlayList } from '../classes/Playlist';\nimport { YouTubeChannel } from '../classes/Channel';\nimport { YouTube } from '..';\n\nexport interface ParseSearchInterface {\n    type?: 'video' | 'playlist' | 'channel';\n    limit?: number;\n}\n\nexport interface thumbnail {\n    width: string;\n    height: string;\n    url: string;\n}\n/**\n * Main command which converts html body data and returns the type of data requested.\n * @param html body of that request\n * @param options limit & type of YouTube search you want.\n * @returns Array of one of YouTube type.\n */\nexport function ParseSearchResult(html: string, options?: ParseSearchInterface): YouTube[] {\n    if (!html) throw new Error(\"Can't parse Search result without data\");\n    if (!options) options = { type: 'video', limit: 0 };\n    else if (!options.type) options.type = 'video';\n    const hasLimit = typeof options.limit === 'number' && options.limit > 0;\n\n    const data = html\n        .split('var ytInitialData = ')?.[1]\n        ?.split(';</script>')[0]\n        .split(/;\\s*(var|const|let)/)[0];\n    const json_data = JSON.parse(data);\n    const results = [];\n    const details =\n        json_data.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents[0]\n            .itemSectionRenderer.contents;\n    for (const detail of details) {\n        if (hasLimit && results.length === options.limit) break;\n        if (!detail.videoRenderer && !detail.channelRenderer && !detail.playlistRenderer) continue;\n        switch (options.type) {\n            case 'video': {\n                const parsed = parseVideo(detail);\n                if (parsed) results.push(parsed);\n                break;\n            }\n            case 'channel': {\n                const parsed = parseChannel(detail);\n                if (parsed) results.push(parsed);\n                break;\n            }\n            case 'playlist': {\n                const parsed = parsePlaylist(detail);\n                if (parsed) results.push(parsed);\n                break;\n            }\n            default:\n                throw new Error(`Unknown search type: ${options.type}`);\n        }\n    }\n    return results;\n}\n/**\n * Function to convert [hour : minutes : seconds] format to seconds\n * @param duration hour : minutes : seconds format\n * @returns seconds\n */\nfunction parseDuration(duration: string): number {\n    if (!duration) return 0;\n    const args = duration.split(':');\n    let dur = 0;\n\n    switch (args.length) {\n        case 3:\n            dur = parseInt(args[0]) * 60 * 60 + parseInt(args[1]) * 60 + parseInt(args[2]);\n            break;\n        case 2:\n            dur = parseInt(args[0]) * 60 + parseInt(args[1]);\n            break;\n        default:\n            dur = parseInt(args[0]);\n    }\n\n    return dur;\n}\n/**\n * Function to parse Channel searches\n * @param data body of that channel request.\n * @returns YouTubeChannel class\n */\nexport function parseChannel(data?: any): YouTubeChannel {\n    if (!data || !data.channelRenderer) throw new Error('Failed to Parse YouTube Channel');\n    const badge = data.channelRenderer.ownerBadges?.[0]?.metadataBadgeRenderer?.style?.toLowerCase();\n    const url = `https://www.youtube.com${\n        data.channelRenderer.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\n        data.channelRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url\n    }`;\n    const thumbnail = data.channelRenderer.thumbnail.thumbnails[data.channelRenderer.thumbnail.thumbnails.length - 1];\n    const res = new YouTubeChannel({\n        id: data.channelRenderer.channelId,\n        name: data.channelRenderer.title.simpleText,\n        icon: {\n            url: thumbnail.url.replace('//', 'https://'),\n            width: thumbnail.width,\n            height: thumbnail.height\n        },\n        url: url,\n        verified: Boolean(badge?.includes('verified')),\n        artist: Boolean(badge?.includes('artist')),\n        subscribers: data.channelRenderer.subscriberCountText?.simpleText ?? '0 subscribers'\n    });\n\n    return res;\n}\n/**\n * Function to parse Video searches\n * @param data body of that video request.\n * @returns YouTubeVideo class\n */\nexport function parseVideo(data?: any): YouTubeVideo {\n    if (!data || !data.videoRenderer) throw new Error('Failed to Parse YouTube Video');\n\n    const channel = data.videoRenderer.ownerText.runs[0];\n    const badge = data.videoRenderer.ownerBadges?.[0]?.metadataBadgeRenderer?.style?.toLowerCase();\n    const res = new YouTubeVideo({\n        id: data.videoRenderer.videoId,\n        url: `https://www.youtube.com/watch?v=${data.videoRenderer.videoId}`,\n        title: data.videoRenderer.title.runs[0].text,\n        description: data.videoRenderer.detailedMetadataSnippets?.[0].snippetText.runs.length\n            ? data.videoRenderer.detailedMetadataSnippets[0].snippetText.runs.map((run: any) => run.text).join('')\n            : '',\n        duration: data.videoRenderer.lengthText ? parseDuration(data.videoRenderer.lengthText.simpleText) : 0,\n        duration_raw: data.videoRenderer.lengthText ? data.videoRenderer.lengthText.simpleText : null,\n        thumbnail: data.videoRenderer.thumbnail.thumbnails[data.videoRenderer.thumbnail.thumbnails.length - 1],\n        channel: {\n            id: channel.navigationEndpoint.browseEndpoint.browseId || null,\n            name: channel.text || null,\n            url: `https://www.youtube.com${\n                channel.navigationEndpoint.browseEndpoint.canonicalBaseUrl ||\n                channel.navigationEndpoint.commandMetadata.webCommandMetadata.url\n            }`,\n            icons: data.videoRenderer.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail\n                .thumbnails,\n            verified: Boolean(badge?.includes('verified')),\n            artist: Boolean(badge?.includes('artist'))\n        },\n        uploadedAt: data.videoRenderer.publishedTimeText?.simpleText ?? null,\n        views: data.videoRenderer.viewCountText?.simpleText?.replace(/[^0-9]/g, '') ?? 0,\n        live: data.videoRenderer.lengthText ? false : true\n    });\n\n    return res;\n}\n/**\n * Function to parse Playlist searches\n * @param data body of that playlist request.\n * @returns YouTubePlaylist class\n */\nexport function parsePlaylist(data?: any): YouTubePlayList {\n    if (!data || !data.playlistRenderer) throw new Error('Failed to Parse YouTube Playlist');\n\n    const thumbnail =\n        data.playlistRenderer.thumbnails[0].thumbnails[data.playlistRenderer.thumbnails[0].thumbnails.length - 1];\n    const channel = data.playlistRenderer.shortBylineText.runs?.[0];\n\n    const res = new YouTubePlayList(\n        {\n            id: data.playlistRenderer.playlistId,\n            title: data.playlistRenderer.title.simpleText,\n            thumbnail: {\n                id: data.playlistRenderer.playlistId,\n                url: thumbnail.url,\n                height: thumbnail.height,\n                width: thumbnail.width\n            },\n            channel: {\n                id: channel?.navigationEndpoint.browseEndpoint.browseId,\n                name: channel?.text,\n                url: `https://www.youtube.com${channel?.navigationEndpoint.commandMetadata.webCommandMetadata.url}`\n            },\n            videos: parseInt(data.playlistRenderer.videoCount.replace(/[^0-9]/g, ''))\n        },\n        true\n    );\n\n    return res;\n}\n"]}