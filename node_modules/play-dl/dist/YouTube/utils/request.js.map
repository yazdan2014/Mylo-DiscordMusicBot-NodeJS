{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/request.ts"],"names":[],"mappings":"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","sourcesContent":["import https, { RequestOptions } from 'https';\r\nimport tls from 'tls';\r\nimport http, { ClientRequest, IncomingMessage } from 'http';\r\nimport { URL } from 'url';\r\nimport { getCookies, setCookie, uploadCookie } from './cookie';\r\n/**\r\n * Types for Proxy\r\n */\r\nexport type Proxy = ProxyOpts | string;\r\n\r\ninterface ProxyOpts {\r\n    host: string;\r\n    port: number;\r\n    authentication?: {\r\n        username: string;\r\n        password: string;\r\n    };\r\n}\r\n\r\ninterface ProxyOutput {\r\n    statusCode: number;\r\n    head: string[];\r\n    body: string;\r\n}\r\n\r\ninterface RequestOpts extends RequestOptions {\r\n    body?: string;\r\n    method?: 'GET' | 'POST';\r\n    proxies?: Proxy[];\r\n    cookies?: boolean;\r\n}\r\n/**\r\n * Main module that play-dl uses for making a https request\r\n * @param req_url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns Incoming Message from the https request\r\n */\r\nfunction https_getter(req_url: string, options: RequestOpts = {}): Promise<IncomingMessage> {\r\n    return new Promise((resolve, reject) => {\r\n        const s = new URL(req_url);\r\n        options.method ??= 'GET';\r\n        const req_options: RequestOptions = {\r\n            host: s.hostname,\r\n            path: s.pathname + s.search,\r\n            headers: options.headers ?? {},\r\n            method: options.method\r\n        };\r\n\r\n        const req = https.request(req_options, resolve);\r\n        req.on('error', (err) => {\r\n            reject(err);\r\n        });\r\n        if (options.method === 'POST') req.write(options.body);\r\n        req.end();\r\n    });\r\n}\r\n/**\r\n * Chooses one random number between max and min number.\r\n * @param min Minimum number\r\n * @param max Maximum number\r\n * @returns Random Number\r\n */\r\nfunction randomIntFromInterval(min: number, max: number): number {\r\n    let x = Math.floor(Math.random() * (max - min + 1) + min);\r\n    if (x === 0) return 0;\r\n    else return x - 1;\r\n}\r\n/**\r\n * Main module that play-dl uses for proxy.\r\n * @param req_url URL to make https request to\r\n * @param req_proxy Proxies array\r\n * @returns Object with statusCode, head and body\r\n */\r\nasync function proxy_getter(req_url: string, req_proxy: Proxy[]): Promise<ProxyOutput> {\r\n    return new Promise((resolve, reject) => {\r\n        const proxy: string | ProxyOpts = req_proxy[randomIntFromInterval(0, req_proxy.length)];\r\n        const parsed_url = new URL(req_url);\r\n        let opts: ProxyOpts;\r\n        if (typeof proxy === 'string') {\r\n            const parsed = new URL(proxy);\r\n            opts = {\r\n                host: parsed.hostname,\r\n                port: Number(parsed.port),\r\n                authentication: {\r\n                    username: parsed.username,\r\n                    password: parsed.password\r\n                }\r\n            };\r\n        } else opts = proxy;\r\n        let req: ClientRequest;\r\n        if (opts.authentication?.username.length === 0) {\r\n            req = http.request({\r\n                host: opts.host,\r\n                port: opts.port,\r\n                method: 'CONNECT',\r\n                path: `${parsed_url.host}:443`\r\n            });\r\n        } else {\r\n            req = http.request({\r\n                host: opts.host,\r\n                port: opts.port,\r\n                method: 'CONNECT',\r\n                path: `${parsed_url.host}:443`,\r\n                headers: {\r\n                    'Proxy-Authorization': `Basic ${Buffer.from(\r\n                        `${opts.authentication?.username}:${opts.authentication?.password}`\r\n                    ).toString('base64')}`\r\n                }\r\n            });\r\n        }\r\n\r\n        req.on('connect', function (res, socket, head) {\r\n            const tlsConnection = tls.connect(\r\n                {\r\n                    host: parsed_url.hostname,\r\n                    port: 443,\r\n                    socket: socket,\r\n                    rejectUnauthorized: false\r\n                },\r\n                function () {\r\n                    tlsConnection.write(\r\n                        `GET ${parsed_url.pathname}${parsed_url.search} HTTP/1.1\\r\\n` +\r\n                            `Host : ${parsed_url.hostname}\\r\\n` +\r\n                            'Connection: close\\r\\n' +\r\n                            '\\r\\n'\r\n                    );\r\n                }\r\n            );\r\n\r\n            tlsConnection.setEncoding('utf-8');\r\n            let data = '';\r\n            tlsConnection.once('error', (e) => reject(e));\r\n            tlsConnection.on('data', (c) => (data += c));\r\n            tlsConnection.on('end', () => {\r\n                const y = data.split('\\r\\n\\r\\n');\r\n                const head = y.shift() as string;\r\n                resolve({\r\n                    statusCode: Number(head.split('\\n')[0].split(' ')[1]),\r\n                    head: head.split('\\r\\n'),\r\n                    body: y.join('\\n')\r\n                });\r\n            });\r\n        });\r\n        req.on('error', (e: Error) => reject(e));\r\n        req.end();\r\n    });\r\n}\r\n/**\r\n * Main module which play-dl uses to make a proxy or normal request\r\n * @param url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns body of that request\r\n */\r\nexport async function request(url: string, options: RequestOpts = {}): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n        if (!options?.proxies || options.proxies.length === 0) {\r\n            let data = '';\r\n            let cookies_added = false;\r\n            if (options.cookies) {\r\n                let cook = getCookies();\r\n                if (typeof cook === 'string' && options.headers) {\r\n                    Object.assign(options.headers, { cookie: cook });\r\n                    cookies_added = true;\r\n                }\r\n            }\r\n            let res = await https_getter(url, options).catch((err: Error) => err);\r\n            if (res instanceof Error) {\r\n                reject(res);\r\n                return;\r\n            }\r\n            if (res.headers && res.headers['set-cookie'] && cookies_added) {\r\n                res.headers['set-cookie'].forEach((x) => {\r\n                    x.split(';').forEach((x) => {\r\n                        const arr = x.split('=');\r\n                        if (arr.length <= 1) return;\r\n                        const key = arr.shift()?.trim() as string;\r\n                        const value = arr.join('=').trim();\r\n                        setCookie(key, value);\r\n                    });\r\n                });\r\n                uploadCookie();\r\n            }\r\n            if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n                res = await https_getter(res.headers.location as string, options);\r\n            } else if (Number(res.statusCode) > 400) {\r\n                reject(new Error(`Got ${res.statusCode} from the request`));\r\n            }\r\n            res.setEncoding('utf-8');\r\n            res.on('data', (c) => (data += c));\r\n            res.on('end', () => resolve(data));\r\n        } else {\r\n            let cookies_added = false;\r\n            if (options.cookies) {\r\n                let cook = getCookies();\r\n                if (typeof cook === 'string' && options.headers) {\r\n                    Object.assign(options.headers, { cookie: cook });\r\n                    cookies_added = true;\r\n                }\r\n            }\r\n            let res = await proxy_getter(url, options.proxies).catch((e: Error) => e);\r\n            if (res instanceof Error) {\r\n                reject(res);\r\n                return;\r\n            }\r\n            if (res.head && cookies_added) {\r\n                let cookies = res.head.filter((x) => x.toLocaleLowerCase().startsWith('set-cookie: '));\r\n                cookies.forEach((x) => {\r\n                    x.toLocaleLowerCase()\r\n                        .split('set-cookie: ')[1]\r\n                        .split(';')\r\n                        .forEach((y) => {\r\n                            const arr = y.split('=');\r\n                            if (arr.length <= 1) return;\r\n                            const key = arr.shift()?.trim() as string;\r\n                            const value = arr.join('=').trim();\r\n                            setCookie(key, value);\r\n                        });\r\n                });\r\n                uploadCookie();\r\n            }\r\n            if (res.statusCode >= 300 && res.statusCode < 400) {\r\n                let url = res.head.filter((x) => x.startsWith('Location: '));\r\n                res = await proxy_getter(url[0].split('\\n')[0], options.proxies);\r\n            } else if (res.statusCode > 400) {\r\n                reject(new Error(`GOT ${res.statusCode} from proxy request`));\r\n            }\r\n            resolve(res.body);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Main module which play-dl uses to make a request to stream url.\r\n * @param url URL to make https request to\r\n * @param options Request options for https request\r\n * @returns IncomingMessage from the request\r\n */\r\nexport async function request_stream(url: string, options?: RequestOpts): Promise<IncomingMessage> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await https_getter(res.headers.location as string, options);\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n"]}