{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/request.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA6C;AAE7C,6BAAyB;AAOzB,KAAK,UAAU,YAAY,CAAC,OAAgB,EAAE,UAAwB,EAAE;IACpE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;;QACnC,IAAI,CAAC,GAAG,IAAI,SAAG,CAAC,OAAO,CAAC,CAAA;QACxB,MAAA,OAAO,CAAC,MAAM,oCAAd,OAAO,CAAC,MAAM,GAAK,KAAK,EAAA;QACxB,IAAI,WAAW,GAAoB;YAC/B,IAAI,EAAG,CAAC,CAAC,QAAQ;YACjB,IAAI,EAAG,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,MAAM;YAC5B,OAAO,EAAG,MAAA,OAAO,CAAC,OAAO,mCAAI,EAAE;YAC/B,MAAM,EAAG,OAAO,CAAC,MAAM;SAC1B,CAAA;QAED,IAAI,GAAG,GAAG,eAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,EAAE;YAC9C,OAAO,CAAC,QAAQ,CAAC,CAAA;QACrB,CAAC,CAAC,CAAA;QACF,IAAG,OAAO,CAAC,MAAM,KAAK,MAAM;YAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QACrD,GAAG,CAAC,GAAG,EAAE,CAAA;IACb,CAAC,CAAC,CAAA;AACN,CAAC;AAEM,KAAK,UAAU,OAAO,CAAC,GAAY,EAAE,OAAsB;IAC9D,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,IAAI,IAAI,GAAG,EAAE,CAAA;QACb,IAAI,GAAG,GAAG,MAAM,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAC1C,IAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,EAAC;YAC7D,GAAG,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,QAAkB,EAAG,OAAO,CAAC,CAAA;SACrE;aACI,IAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,EAAC;YACjC,MAAM,CAAC,OAAO,GAAG,CAAC,UAAU,mBAAmB,CAAC,CAAA;SACnD;QACD,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QACxB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,IAAE,CAAC,CAAC,CAAA;QAC9B,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;IACtC,CAAC,CAAC,CAAA;AACN,CAAC;AAdD,0BAcC;AAEM,KAAK,UAAU,cAAc,CAAC,GAAY,EAAE,OAAsB;IACrE,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,IAAI,GAAG,GAAG,MAAM,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAC1C,IAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,GAAG,EAAC;YAC7D,GAAG,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,QAAkB,EAAE,OAAO,CAAC,CAAA;SACpE;QACD,OAAO,CAAC,GAAG,CAAC,CAAA;IAChB,CAAC,CAAC,CAAA;AACN,CAAC;AARD,wCAQC","sourcesContent":["import https, { RequestOptions } from 'https'\r\nimport { IncomingMessage } from 'http'\r\nimport { URL } from 'url'\r\n\r\ninterface RequestOpts extends RequestOptions{\r\n    body? : string;\r\n    method? : \"GET\" | \"POST\"\r\n}\r\n\r\nasync function https_getter(req_url : string, options : RequestOpts = {}): Promise<IncomingMessage>{\r\n    return new Promise((resolve, reject) => {\r\n        let s = new URL(req_url)\r\n        options.method ??= \"GET\"\r\n        let req_options : RequestOptions = {\r\n            host : s.hostname,\r\n            path : s.pathname + s.search,\r\n            headers : options.headers ?? {},\r\n            method : options.method\r\n        }\r\n\r\n        let req = https.request(req_options, (response) => {\r\n            resolve(response)\r\n        })\r\n        if(options.method === \"POST\") req.write(options.body)\r\n        req.end()\r\n    })\r\n}\r\n\r\nexport async function request(url : string, options? : RequestOpts): Promise<string>{\r\n    return new Promise(async (resolve, reject) => {\r\n        let data = ''\r\n        let res = await https_getter(url, options)\r\n        if(Number(res.statusCode) >= 300 && Number(res.statusCode) < 400){\r\n            res = await https_getter(res.headers.location as string , options)\r\n        }\r\n        else if(Number(res.statusCode) > 400){\r\n            reject(`Got ${res.statusCode} from the request`)\r\n        }\r\n        res.setEncoding('utf-8')\r\n        res.on('data', (c) => data+=c)\r\n        res.on('end', () => resolve(data))\r\n    })\r\n}\r\n\r\nexport async function request_stream(url : string, options? : RequestOpts): Promise<IncomingMessage>{\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(url, options)\r\n        if(Number(res.statusCode) >= 300 && Number(res.statusCode) < 400){\r\n            res = await https_getter(res.headers.location as string, options)\r\n        }\r\n        resolve(res)\r\n    })\r\n}\r\n"]}