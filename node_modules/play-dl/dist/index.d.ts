/// <reference types="node" />
export { playlist_info, video_basic_info, video_info, decipher_info, yt_validate, extractID, YouTube, YouTubeStream, YouTubeChannel, YouTubePlayList, YouTubeVideo } from './YouTube';
export { spotify, sp_validate, refreshToken, is_expired, SpotifyAlbum, SpotifyPlaylist, SpotifyTrack, Spotify } from './Spotify';
export { soundcloud, so_validate, SoundCloud, SoundCloudStream, getFreeClientID, SoundCloudPlaylist, SoundCloudTrack } from './SoundCloud';
export { deezer, dz_validate, dz_advanced_track_search, Deezer, DeezerTrack, DeezerPlaylist, DeezerAlbum } from './Deezer';
export { setToken } from './token';
interface SearchOptions {
    limit?: number;
    source?: {
        youtube?: 'video' | 'playlist' | 'channel';
        spotify?: 'album' | 'playlist' | 'track';
        soundcloud?: 'tracks' | 'playlists' | 'albums';
        deezer?: 'track' | 'playlist' | 'album';
    };
    fuzzy?: boolean;
}
import { YouTubeStream, SoundCloudStream } from '.';
import { StreamOptions } from './YouTube/stream';
import { SoundCloudPlaylist, SoundCloudTrack } from './SoundCloud/classes';
import { EventEmitter } from 'stream';
import { InfoData } from './YouTube/utils/constants';
import { YouTubeVideo } from './YouTube/classes/Video';
import { YouTubePlayList } from './YouTube/classes/Playlist';
import { YouTubeChannel } from './YouTube/classes/Channel';
import { SpotifyAlbum, SpotifyPlaylist, SpotifyTrack } from './Spotify/classes';
import { DeezerAlbum, DeezerPlaylist, DeezerTrack } from './Deezer/classes';
/**
 * Creates a Stream [ YouTube or SoundCloud ] class from a url for playing.
 *
 * Example
 * ```ts
 * const source = await play.stream('youtube video URL') // YouTube Video Stream
 *
 * const source = await play.stream('soundcloud track URL') // SoundCloud Track Stream
 *
 * const resource = createAudioResource(source.stream, {
 *      inputType : source.type
 * }) // Use discordjs voice createAudioResource function.
 * ```
 * @param url Video / Track URL
 * @param options
 *
 *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]
 *  - `Proxy[]` proxy : sends data through a proxy
 *  - `boolean` htmldata : given data is html data or not
 * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play
 */
export declare function stream(url: string, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;
/**
 * Searches through a particular source and gives respective info.
 *
 * Example
 * ```ts
 * const searched = await play.search('Rick Roll', { source : { youtube : "video" } }) // YouTube Video Search
 *
 * const searched = await play.search('Rick Roll', { limit : 1 }) // YouTube Video Search but returns only 1 video.
 *
 * const searched = await play.search('Rick Roll', { source : { spotify : "track" } }) // Spotify Track Search
 *
 * const searched = await play.search('Rick Roll', { source : { soundcloud : "tracks" } }) // SoundCloud Track Search
 *
 * const searched = await play.search('Rick Roll', { source : { deezer : "track" } }) // Deezer Track Search
 * ```
 * @param query string to search.
 * @param options
 *
 *  - `number` limit : No of searches you want to have.
 *  - `boolean` fuzzy : Whether the search should be fuzzy or only return exact matches. Defaults to `true`. [ for `Deezer` Only ]
 *  - `Object` source : Contains type of source and type of result you want to have
 * ```ts
 *      - youtube : 'video' | 'playlist' | 'channel';
        - spotify : 'album' | 'playlist' | 'track';
        - soundcloud : 'tracks' | 'playlists' | 'albums';
        - deezer : 'track' | 'playlist' | 'album';
    ```
 * @returns Array of {@link YouTube} or {@link Spotify} or {@link SoundCloud} or {@link Deezer} type
 */
export declare function search(query: string, options: {
    source: {
        deezer: 'album';
    };
} & SearchOptions): Promise<DeezerAlbum[]>;
export declare function search(query: string, options: {
    source: {
        deezer: 'playlist';
    };
} & SearchOptions): Promise<DeezerPlaylist[]>;
export declare function search(query: string, options: {
    source: {
        deezer: 'track';
    };
} & SearchOptions): Promise<DeezerTrack[]>;
export declare function search(query: string, options: {
    source: {
        soundcloud: 'albums';
    };
} & SearchOptions): Promise<SoundCloudPlaylist[]>;
export declare function search(query: string, options: {
    source: {
        soundcloud: 'playlists';
    };
} & SearchOptions): Promise<SoundCloudPlaylist[]>;
export declare function search(query: string, options: {
    source: {
        soundcloud: 'tracks';
    };
} & SearchOptions): Promise<SoundCloudTrack[]>;
export declare function search(query: string, options: {
    source: {
        spotify: 'album';
    };
} & SearchOptions): Promise<SpotifyAlbum[]>;
export declare function search(query: string, options: {
    source: {
        spotify: 'playlist';
    };
} & SearchOptions): Promise<SpotifyPlaylist[]>;
export declare function search(query: string, options: {
    source: {
        spotify: 'track';
    };
} & SearchOptions): Promise<SpotifyTrack[]>;
export declare function search(query: string, options: {
    source: {
        youtube: 'channel';
    };
} & SearchOptions): Promise<YouTubeChannel[]>;
export declare function search(query: string, options: {
    source: {
        youtube: 'playlist';
    };
} & SearchOptions): Promise<YouTubePlayList[]>;
export declare function search(query: string, options: {
    source: {
        youtube: 'video';
    };
} & SearchOptions): Promise<YouTubeVideo[]>;
export declare function search(query: string, options: {
    limit: number;
} & SearchOptions): Promise<YouTubeVideo[]>;
export declare function search(query: string, options?: SearchOptions): Promise<YouTubeVideo[]>;
/**
 * Creates a Stream [ YouTube or SoundCloud ] class from video or track info for playing.
 *
 * Example
 * ```ts
 * const info = await video_info('youtube URL')
 * const source = await play.stream_from_info(info) // YouTube Video Stream
 *
 * const soundInfo = await play.soundcloud('SoundCloud URL')
 * const source = await play.stream_from_info(soundInfo) // SoundCloud Track Stream
 *
 * const resource = createAudioResource(source.stream, {
 *      inputType : source.type
 * }) // Use discordjs voice createAudioResource function.
 * ```
 * @param info YouTube video info OR SoundCloud track Class
 * @param options
 *
 *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]
 *  - `Proxy[]` proxy : sends data through a proxy
 *  - `boolean` htmldata : given data is html data or not
 * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play
 */
export declare function stream_from_info(info: InfoData | SoundCloudTrack, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;
/**
 * Validates url that play-dl supports.
 *
 * - `so` - SoundCloud
 * - `sp` - Spotify
 * - `dz` - Deezer
 * - `yt` - YouTube
 * @param url URL
 * @returns
 * ```ts
 * 'so_playlist' / 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'dz_track' | 'dz_playlist' | 'dz_album' | 'yt_video' | 'yt_playlist' | 'search' | false
 * ```
 */
export declare function validate(url: string): Promise<'so_playlist' | 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'dz_track' | 'dz_playlist' | 'dz_album' | 'yt_video' | 'yt_playlist' | 'search' | false>;
/**
 * Authorization interface for Spotify, SoundCloud and YouTube.
 *
 * Either stores info in `.data` folder or shows relevant data to be used in `setToken` function.
 *
 * ```ts
 * const play = require('play-dl')
 *
 * play.authorization()
 * ```
 *
 * Just run the above command and you will get a interface asking some questions.
 */
export declare function authorization(): void;
/**
 * Attaches paused, playing, autoPaused Listeners to discordjs voice AudioPlayer.
 *
 * Useful if you don't want extra data to be downloaded by play-dl.
 * @param player discordjs voice AudioPlayer
 * @param resource A {@link YouTubeStream} or {@link SoundCloudStream}
 */
export declare function attachListeners(player: EventEmitter, resource: YouTubeStream | SoundCloudStream): void;
//# sourceMappingURL=index.d.ts.map