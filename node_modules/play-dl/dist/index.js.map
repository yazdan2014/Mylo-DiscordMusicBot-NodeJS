{"version":3,"file":"index.js","sourceRoot":"","sources":["../play-dl/index.ts"],"names":[],"mappings":"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","sourcesContent":["export { playlist_info, video_basic_info, video_info, yt_validate, extractID, YouTube, YouTubeStream } from './YouTube';\r\nexport { spotify, sp_validate, refreshToken, is_expired, Spotify } from './Spotify';\r\nexport { soundcloud, so_validate, SoundCloud, SoundCloudStream } from './SoundCloud';\r\n\r\nenum AudioPlayerStatus {\r\n    Idle = 'idle',\r\n    Buffering = 'buffering',\r\n    Paused = 'paused',\r\n    Playing = 'playing',\r\n    AutoPaused = 'autopaused'\r\n}\r\n\r\ninterface SearchOptions {\r\n    limit?: number;\r\n    source?: {\r\n        youtube?: 'video' | 'playlist' | 'channel';\r\n        spotify?: 'album' | 'playlist' | 'track';\r\n        soundcloud?: 'tracks' | 'playlists' | 'albums';\r\n    };\r\n}\r\n\r\nimport readline from 'readline';\r\nimport fs from 'fs';\r\nimport {\r\n    sp_validate,\r\n    yt_validate,\r\n    so_validate,\r\n    YouTubeStream,\r\n    SoundCloudStream,\r\n    YouTube,\r\n    SoundCloud,\r\n    Spotify\r\n} from '.';\r\nimport { SpotifyAuthorize, sp_search } from './Spotify';\r\nimport { check_id, so_search, stream as so_stream, stream_from_info as so_stream_info } from './SoundCloud';\r\nimport { InfoData, stream as yt_stream, StreamOptions, stream_from_info as yt_stream_info } from './YouTube/stream';\r\nimport { SoundCloudTrack } from './SoundCloud/classes';\r\nimport { yt_search } from './YouTube/search';\r\nimport { EventEmitter } from 'stream';\r\n\r\n/**\r\n * Main stream Command for streaming through various sources\r\n * @param url The video / track url to make stream of\r\n * @param options contains quality, cookie and proxy to set for stream\r\n * @returns YouTube / SoundCloud Stream to play\r\n */\r\n\r\nexport async function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream | SoundCloudStream> {\r\n    if (url.length === 0) throw new Error('Stream URL has a length of 0. Check your url again.');\r\n    if (url.indexOf('soundcloud') !== -1) return await so_stream(url, options.quality);\r\n    else return await yt_stream(url, options);\r\n}\r\n\r\n/**\r\n *  Main Search Command for searching through various sources\r\n * @param query string to search.\r\n * @param options contains limit and source to choose.\r\n * @returns Array of YouTube or Spotify or SoundCloud\r\n */\r\nexport async function search(\r\n    query: string,\r\n    options: SearchOptions = {}\r\n): Promise<YouTube[] | Spotify[] | SoundCloud[]> {\r\n    if (!options.source) options.source = { youtube: 'video' };\r\n\r\n    if (options.source.youtube) return await yt_search(query, { limit: options.limit, type: options.source.youtube });\r\n    else if (options.source.spotify) return await sp_search(query, options.source.spotify, options.limit);\r\n    else if (options.source.soundcloud) return await so_search(query, options.source.soundcloud, options.limit);\r\n    else throw new Error('Not possible to reach Here LOL. Easter Egg of play-dl if someone get this.');\r\n}\r\n\r\n/**\r\n *  stream Command for streaming through various sources using data from video_info or soundcloud\r\n *  SoundCloud Track is only supported\r\n * @param info video_info data or SoundCloud Track data.\r\n * @param options contains quality, cookie and proxy to set for stream\r\n * @returns YouTube / SoundCloud Stream to play\r\n */\r\nexport async function stream_from_info(\r\n    info: InfoData | SoundCloudTrack,\r\n    options: StreamOptions = {}\r\n): Promise<YouTubeStream | SoundCloudStream> {\r\n    if (info instanceof SoundCloudTrack) return await so_stream_info(info, options.quality);\r\n    else return await yt_stream_info(info, options);\r\n}\r\n/**\r\n * Command to validate the provided url. It checks whether it supports play-dl or not.\r\n * @param url url to validate\r\n * @returns On failure, returns false else type of url.\r\n */\r\nexport async function validate(\r\n    url: string\r\n): Promise<\r\n    'so_playlist' | 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'yt_video' | 'yt_playlist' | 'search' | false\r\n> {\r\n    let check;\r\n    if (!url.startsWith('https')) return 'search';\r\n    if (url.indexOf('spotify') !== -1) {\r\n        check = sp_validate(url);\r\n        return check !== false ? (('sp_' + check) as 'sp_track' | 'sp_album' | 'sp_playlist') : false;\r\n    } else if (url.indexOf('soundcloud') !== -1) {\r\n        check = await so_validate(url);\r\n        return check !== false ? (('so_' + check) as 'so_playlist' | 'so_track') : false;\r\n    } else {\r\n        check = yt_validate(url);\r\n        return check !== false ? (('yt_' + check) as 'yt_video' | 'yt_playlist') : false;\r\n    }\r\n}\r\n/**\r\n * Authorization interface for Spotify and SoundCloud.\r\n */\r\nexport function authorization(): void {\r\n    const ask = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n    ask.question('Choose your service - sc (for SoundCloud) / sp (for Spotify)  / yo (for YouTube): ', (msg) => {\r\n        if (msg.toLowerCase().startsWith('sp')) {\r\n            let client_id: string, client_secret: string, redirect_url: string, market: string;\r\n            ask.question('Start by entering your Client ID : ', (id) => {\r\n                client_id = id;\r\n                ask.question('Now enter your Client Secret : ', (secret) => {\r\n                    client_secret = secret;\r\n                    ask.question('Enter your Redirect URL now : ', (url) => {\r\n                        redirect_url = url;\r\n                        console.log(\r\n                            '\\nIf you would like to know your region code visit : \\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \\n'\r\n                        );\r\n                        ask.question('Enter your region code (2-letter country code) : ', (mar) => {\r\n                            if (mar.length === 2) market = mar;\r\n                            else {\r\n                                console.log(\r\n                                    \"That doesn't look like a valid region code, IN will be selected as default.\"\r\n                                );\r\n                                market = 'IN';\r\n                            }\r\n                            console.log(\r\n                                '\\nNow open your browser and paste the below url, then authorize it and copy the redirected url. \\n'\r\n                            );\r\n                            console.log(\r\n                                `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(\r\n                                    redirect_url\r\n                                )} \\n`\r\n                            );\r\n                            ask.question('Paste the url which you just copied : ', async (url) => {\r\n                                if (!fs.existsSync('.data')) fs.mkdirSync('.data');\r\n                                const spotifyData = {\r\n                                    client_id,\r\n                                    client_secret,\r\n                                    redirect_url,\r\n                                    authorization_code: url.split('code=')[1],\r\n                                    market\r\n                                };\r\n                                const check = await SpotifyAuthorize(spotifyData);\r\n                                if (check === false) throw new Error('Failed to get access token.');\r\n                                ask.close();\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        } else if (msg.toLowerCase().startsWith('sc')) {\r\n            ask.question('Client ID : ', async (id) => {\r\n                let client_id = id;\r\n                if (!client_id) {\r\n                    console.log(\"You didn't provide a client ID. Try again...\");\r\n                    ask.close();\r\n                    return;\r\n                }\r\n                if (!fs.existsSync('.data')) fs.mkdirSync('.data');\r\n                console.log('Validating your client ID, hold on...');\r\n                if (await check_id(client_id)) {\r\n                    console.log('Client ID has been validated successfully.');\r\n                    fs.writeFileSync('.data/soundcloud.data', JSON.stringify({ client_id }, undefined, 4));\r\n                } else console.log(\"That doesn't look like a valid client ID. Retry with a correct client ID.\");\r\n                ask.close();\r\n            });\r\n        } else if (msg.toLowerCase().startsWith('yo')) {\r\n            ask.question('Cookies : ', (cook: string) => {\r\n                if (!cook || cook.length === 0) {\r\n                    console.log(\"You didn't provide a cookie. Try again...\");\r\n                    ask.close();\r\n                    return;\r\n                }\r\n                if (!fs.existsSync('.data')) fs.mkdirSync('.data');\r\n                console.log('Cookies has been added successfully.');\r\n                let cookie: Object = {};\r\n                cook.split(';').forEach((x) => {\r\n                    const arr = x.split('=');\r\n                    if (arr.length <= 1) return;\r\n                    const key = arr.shift()?.trim() as string;\r\n                    const value = arr.join('=').trim();\r\n                    Object.assign(cookie, { [key]: value });\r\n                });\r\n                fs.writeFileSync('.data/youtube.data', JSON.stringify({ cookie }, undefined, 4));\r\n                ask.close();\r\n            });\r\n        } else {\r\n            console.log(\"That option doesn't exist. Try again...\");\r\n            ask.close();\r\n        }\r\n    });\r\n}\r\n\r\nexport function attachListeners(player: EventEmitter, resource: YouTubeStream | SoundCloudStream) {\r\n    const pauseListener = () => resource.pause()\r\n    const resumeListener = () => resource.resume()\r\n    player.on(AudioPlayerStatus.Paused, pauseListener);\r\n    player.on(AudioPlayerStatus.AutoPaused, pauseListener);\r\n    player.on(AudioPlayerStatus.Playing, resumeListener);\r\n    player.once(AudioPlayerStatus.Idle, () => {\r\n        player.removeListener(AudioPlayerStatus.Paused, pauseListener);\r\n        player.removeListener(AudioPlayerStatus.AutoPaused, pauseListener);\r\n        player.removeListener(AudioPlayerStatus.Playing, resumeListener);\r\n    });\r\n}\r\n"]}